// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transfer.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferRequest struct {
	Amount          float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	RecipientId     int64   `protobuf:"varint,2,opt,name=recipientId,proto3" json:"recipientId,omitempty"`
	RecipientNumber string  `protobuf:"bytes,3,opt,name=recipientNumber,proto3" json:"recipientNumber,omitempty"`
	Currency        string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Service         string  `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	ReceiveCurrency string  `protobuf:"bytes,6,opt,name=receiveCurrency,proto3" json:"receiveCurrency,omitempty"`
	ExchangeRate    string  `protobuf:"bytes,7,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	SendFee         float64 `protobuf:"fixed64,8,opt,name=sendFee,proto3" json:"sendFee,omitempty"`
	SenderId        string  `protobuf:"bytes,9,opt,name=senderId,proto3" json:"senderId,omitempty"`
	PaymentIntent   string  `protobuf:"bytes,10,opt,name=paymentIntent,proto3" json:"paymentIntent,omitempty"`
}

func (m *TransferRequest) Reset()      { *m = TransferRequest{} }
func (*TransferRequest) ProtoMessage() {}
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{0}
}
func (m *TransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequest.Merge(m, src)
}
func (m *TransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequest proto.InternalMessageInfo

func (m *TransferRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransferRequest) GetRecipientId() int64 {
	if m != nil {
		return m.RecipientId
	}
	return 0
}

func (m *TransferRequest) GetRecipientNumber() string {
	if m != nil {
		return m.RecipientNumber
	}
	return ""
}

func (m *TransferRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TransferRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TransferRequest) GetReceiveCurrency() string {
	if m != nil {
		return m.ReceiveCurrency
	}
	return ""
}

func (m *TransferRequest) GetExchangeRate() string {
	if m != nil {
		return m.ExchangeRate
	}
	return ""
}

func (m *TransferRequest) GetSendFee() float64 {
	if m != nil {
		return m.SendFee
	}
	return 0
}

func (m *TransferRequest) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *TransferRequest) GetPaymentIntent() string {
	if m != nil {
		return m.PaymentIntent
	}
	return ""
}

type TransferReply struct {
	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *TransferReply) Reset()      { *m = TransferReply{} }
func (*TransferReply) ProtoMessage() {}
func (*TransferReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{1}
}
func (m *TransferReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferReply.Merge(m, src)
}
func (m *TransferReply) XXX_Size() int {
	return m.Size()
}
func (m *TransferReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferReply.DiscardUnknown(m)
}

var xxx_messageInfo_TransferReply proto.InternalMessageInfo

func (m *TransferReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*TransferRequest)(nil), "pb.TransferRequest")
	proto.RegisterType((*TransferReply)(nil), "pb.TransferReply")
}

func init() { proto.RegisterFile("transfer.proto", fileDescriptor_96c3e6bcafb460d3) }

var fileDescriptor_96c3e6bcafb460d3 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbd, 0x4e, 0x3a, 0x41,
	0x14, 0xc5, 0x77, 0xe0, 0xff, 0xe7, 0xe3, 0x2a, 0xa2, 0x63, 0x62, 0x26, 0x14, 0x37, 0x2b, 0xb1,
	0xd8, 0x8a, 0x02, 0xad, 0x2d, 0x34, 0x31, 0xa1, 0xb1, 0xd8, 0xf8, 0x02, 0xbb, 0xcb, 0x55, 0x37,
	0x81, 0x61, 0x1d, 0x66, 0x89, 0xdb, 0xf9, 0x08, 0x3e, 0x86, 0x8f, 0x62, 0x49, 0x63, 0x42, 0x29,
	0x43, 0x63, 0xc9, 0x23, 0x98, 0x1d, 0x58, 0x04, 0xba, 0x73, 0x7e, 0x7b, 0xf6, 0xce, 0xfd, 0x80,
	0x23, 0xad, 0x02, 0x39, 0x7e, 0x24, 0xd5, 0x49, 0xd4, 0x48, 0x8f, 0x78, 0x29, 0x09, 0xdb, 0x5f,
	0x25, 0x68, 0x3e, 0xac, 0xb1, 0x4f, 0x2f, 0x29, 0x8d, 0x35, 0x3f, 0x83, 0x4a, 0x30, 0x1c, 0xa5,
	0x52, 0x0b, 0xe6, 0x32, 0x8f, 0xf9, 0x6b, 0xc7, 0x5d, 0x38, 0x50, 0x14, 0xc5, 0x49, 0x4c, 0x52,
	0xf7, 0xfa, 0xa2, 0xe4, 0x32, 0xaf, 0xec, 0x6f, 0x23, 0xee, 0x41, 0x73, 0x63, 0xef, 0xd3, 0x61,
	0x48, 0x4a, 0x94, 0x5d, 0xe6, 0xd5, 0xfd, 0x7d, 0xcc, 0x5b, 0x50, 0x8b, 0x52, 0xa5, 0x48, 0x46,
	0x99, 0xf8, 0x67, 0x23, 0x1b, 0xcf, 0x05, 0x54, 0xc7, 0xa4, 0x26, 0x71, 0x44, 0xe2, 0xbf, 0xfd,
	0x54, 0xd8, 0x75, 0x7d, 0x8a, 0x27, 0x74, 0x5b, 0xfc, 0x5c, 0xd9, 0xd4, 0xdf, 0xc6, 0xbc, 0x0d,
	0x87, 0xf4, 0x1a, 0x3d, 0x07, 0xf2, 0x89, 0xfc, 0x40, 0x93, 0xa8, 0xda, 0xd8, 0x0e, 0x5b, 0xbd,
	0x23, 0xfb, 0x77, 0x44, 0xa2, 0x66, 0x07, 0x2d, 0x6c, 0xde, 0x5d, 0x2e, 0x49, 0xf5, 0xfa, 0xa2,
	0xbe, 0xea, 0xae, 0xf0, 0xfc, 0x02, 0x1a, 0x49, 0x90, 0x0d, 0xf3, 0x81, 0xa5, 0x26, 0xa9, 0x05,
	0xd8, 0xc0, 0x2e, 0x6c, 0x9f, 0x43, 0xe3, 0x6f, 0xad, 0xc9, 0x20, 0xe3, 0xc7, 0x50, 0x26, 0xa5,
	0xec, 0x46, 0xeb, 0x7e, 0x2e, 0xbb, 0xd7, 0x50, 0x2b, 0x22, 0xbc, 0xbb, 0xa5, 0x4f, 0x3b, 0x49,
	0xd8, 0xd9, 0xbb, 0x49, 0xeb, 0x64, 0x17, 0x26, 0x83, 0xec, 0xe6, 0x6a, 0x3a, 0x47, 0x67, 0x36,
	0x47, 0x67, 0x39, 0x47, 0xf6, 0x66, 0x90, 0x7d, 0x18, 0x64, 0x9f, 0x06, 0xd9, 0xd4, 0x20, 0xfb,
	0x36, 0xc8, 0x7e, 0x0c, 0x3a, 0x4b, 0x83, 0xec, 0x7d, 0x81, 0xce, 0x74, 0x81, 0xce, 0x6c, 0x81,
	0x4e, 0x58, 0xb1, 0xb7, 0xbf, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x78, 0x8b, 0x2d, 0xb1, 0x0d,
	0x02, 0x00, 0x00,
}

func (this *TransferRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferRequest)
	if !ok {
		that2, ok := that.(TransferRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.RecipientId != that1.RecipientId {
		return false
	}
	if this.RecipientNumber != that1.RecipientNumber {
		return false
	}
	if this.Currency != that1.Currency {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.ReceiveCurrency != that1.ReceiveCurrency {
		return false
	}
	if this.ExchangeRate != that1.ExchangeRate {
		return false
	}
	if this.SendFee != that1.SendFee {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if this.PaymentIntent != that1.PaymentIntent {
		return false
	}
	return true
}
func (this *TransferReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferReply)
	if !ok {
		that2, ok := that.(TransferReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	return true
}
func (this *TransferRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.TransferRequest{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "RecipientId: "+fmt.Sprintf("%#v", this.RecipientId)+",\n")
	s = append(s, "RecipientNumber: "+fmt.Sprintf("%#v", this.RecipientNumber)+",\n")
	s = append(s, "Currency: "+fmt.Sprintf("%#v", this.Currency)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "ReceiveCurrency: "+fmt.Sprintf("%#v", this.ReceiveCurrency)+",\n")
	s = append(s, "ExchangeRate: "+fmt.Sprintf("%#v", this.ExchangeRate)+",\n")
	s = append(s, "SendFee: "+fmt.Sprintf("%#v", this.SendFee)+",\n")
	s = append(s, "SenderId: "+fmt.Sprintf("%#v", this.SenderId)+",\n")
	s = append(s, "PaymentIntent: "+fmt.Sprintf("%#v", this.PaymentIntent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TransferReply{")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTransfer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransferClient is the client API for Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransferClient interface {
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferReply, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferReply, error) {
	out := new(TransferReply)
	err := c.cc.Invoke(ctx, "/pb.Transfer/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServer is the server API for Transfer service.
type TransferServer interface {
	Transfer(context.Context, *TransferRequest) (*TransferReply, error)
}

// UnimplementedTransferServer can be embedded to have forward compatible implementations.
type UnimplementedTransferServer struct {
}

func (*UnimplementedTransferServer) Transfer(ctx context.Context, req *TransferRequest) (*TransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Transfer/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transfer",
			Handler:    _Transfer_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}

func (m *TransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentIntent) > 0 {
		i -= len(m.PaymentIntent)
		copy(dAtA[i:], m.PaymentIntent)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.PaymentIntent)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SenderId) > 0 {
		i -= len(m.SenderId)
		copy(dAtA[i:], m.SenderId)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.SenderId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SendFee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SendFee))))
		i--
		dAtA[i] = 0x41
	}
	if len(m.ExchangeRate) > 0 {
		i -= len(m.ExchangeRate)
		copy(dAtA[i:], m.ExchangeRate)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.ExchangeRate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReceiveCurrency) > 0 {
		i -= len(m.ReceiveCurrency)
		copy(dAtA[i:], m.ReceiveCurrency)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.ReceiveCurrency)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecipientNumber) > 0 {
		i -= len(m.RecipientNumber)
		copy(dAtA[i:], m.RecipientNumber)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.RecipientNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RecipientId != 0 {
		i = encodeVarintTransfer(dAtA, i, uint64(m.RecipientId))
		i--
		dAtA[i] = 0x10
	}
	if m.Amount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *TransferReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransfer(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransfer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 9
	}
	if m.RecipientId != 0 {
		n += 1 + sovTransfer(uint64(m.RecipientId))
	}
	l = len(m.RecipientNumber)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.ReceiveCurrency)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.ExchangeRate)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	if m.SendFee != 0 {
		n += 9
	}
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.PaymentIntent)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	return n
}

func (m *TransferReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	return n
}

func sovTransfer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransfer(x uint64) (n int) {
	return sovTransfer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TransferRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferRequest{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`RecipientId:` + fmt.Sprintf("%v", this.RecipientId) + `,`,
		`RecipientNumber:` + fmt.Sprintf("%v", this.RecipientNumber) + `,`,
		`Currency:` + fmt.Sprintf("%v", this.Currency) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`ReceiveCurrency:` + fmt.Sprintf("%v", this.ReceiveCurrency) + `,`,
		`ExchangeRate:` + fmt.Sprintf("%v", this.ExchangeRate) + `,`,
		`SendFee:` + fmt.Sprintf("%v", this.SendFee) + `,`,
		`SenderId:` + fmt.Sprintf("%v", this.SenderId) + `,`,
		`PaymentIntent:` + fmt.Sprintf("%v", this.PaymentIntent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferReply{`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTransfer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientId", wireType)
			}
			m.RecipientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecipientId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SendFee = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentIntent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentIntent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransfer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransfer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransfer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransfer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransfer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransfer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransfer = fmt.Errorf("proto: unexpected end of group")
)
