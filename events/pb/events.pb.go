// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

package events

import (
	fmt "fmt"
	pb1 "github.com/alexmeli100/remit/payment/pkg/grpc/pb"
	pb2 "github.com/alexmeli100/remit/transfer/pkg/grpc/pb"
	pb "github.com/alexmeli100/remit/users/pkg/grpc/pb"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventKind int32

const (
	UserCreated        EventKind = 0
	UserPasswordResert EventKind = 1
	PaymentSucceded    EventKind = 2
	PaymentFailed      EventKind = 3
	TransferSucceded   EventKind = 4
	TransferFailed     EventKind = 5
	TransactionSucced  EventKind = 6
	TransactionFailed  EventKind = 7
)

var EventKind_name = map[int32]string{
	0: "UserCreated",
	1: "UserPasswordResert",
	2: "PaymentSucceded",
	3: "PaymentFailed",
	4: "TransferSucceded",
	5: "TransferFailed",
	6: "TransactionSucced",
	7: "TransactionFailed",
}

var EventKind_value = map[string]int32{
	"UserCreated":        0,
	"UserPasswordResert": 1,
	"PaymentSucceded":    2,
	"PaymentFailed":      3,
	"TransferSucceded":   4,
	"TransferFailed":     5,
	"TransactionSucced":  6,
	"TransactionFailed":  7,
}

func (EventKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0}
}

type EventData struct {
	// Types that are valid to be assigned to Data:
	//	*EventData_User
	//	*EventData_Transaction
	//	*EventData_Intent
	//	*EventData_Transfer
	Data isEventData_Data `protobuf_oneof:"Data"`
}

func (m *EventData) Reset()      { *m = EventData{} }
func (*EventData) ProtoMessage() {}
func (*EventData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0}
}
func (m *EventData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventData.Merge(m, src)
}
func (m *EventData) XXX_Size() int {
	return m.Size()
}
func (m *EventData) XXX_DiscardUnknown() {
	xxx_messageInfo_EventData.DiscardUnknown(m)
}

var xxx_messageInfo_EventData proto.InternalMessageInfo

type isEventData_Data interface {
	isEventData_Data()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EventData_User struct {
	User *pb.User `protobuf:"bytes,1,opt,name=user,proto3,oneof" json:"user,omitempty"`
}
type EventData_Transaction struct {
	Transaction *pb1.Transaction `protobuf:"bytes,3,opt,name=transaction,proto3,oneof" json:"transaction,omitempty"`
}
type EventData_Intent struct {
	Intent string `protobuf:"bytes,4,opt,name=intent,proto3,oneof" json:"intent,omitempty"`
}
type EventData_Transfer struct {
	Transfer *pb2.TransferResponse `protobuf:"bytes,5,opt,name=transfer,proto3,oneof" json:"transfer,omitempty"`
}

func (*EventData_User) isEventData_Data()        {}
func (*EventData_Transaction) isEventData_Data() {}
func (*EventData_Intent) isEventData_Data()      {}
func (*EventData_Transfer) isEventData_Data()    {}

func (m *EventData) GetData() isEventData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventData) GetUser() *pb.User {
	if x, ok := m.GetData().(*EventData_User); ok {
		return x.User
	}
	return nil
}

func (m *EventData) GetTransaction() *pb1.Transaction {
	if x, ok := m.GetData().(*EventData_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *EventData) GetIntent() string {
	if x, ok := m.GetData().(*EventData_Intent); ok {
		return x.Intent
	}
	return ""
}

func (m *EventData) GetTransfer() *pb2.TransferResponse {
	if x, ok := m.GetData().(*EventData_Transfer); ok {
		return x.Transfer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventData_User)(nil),
		(*EventData_Transaction)(nil),
		(*EventData_Intent)(nil),
		(*EventData_Transfer)(nil),
	}
}

type Event struct {
	Event   EventKind  `protobuf:"varint,1,opt,name=event,proto3,enum=events.EventKind" json:"event,omitempty"`
	Payload *EventData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{1}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetEvent() EventKind {
	if m != nil {
		return m.Event
	}
	return UserCreated
}

func (m *Event) GetPayload() *EventData {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("events.EventKind", EventKind_name, EventKind_value)
	proto.RegisterType((*EventData)(nil), "events.EventData")
	proto.RegisterType((*Event)(nil), "events.Event")
}

func init() { proto.RegisterFile("events.proto", fileDescriptor_8f22242cb04491f9) }

var fileDescriptor_8f22242cb04491f9 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x67, 0xda, 0xc4, 0x6d, 0x6f, 0xa0, 0x71, 0x2e, 0x05, 0x59, 0x5d, 0x8c, 0xaa, 0x6e,
	0xa8, 0x40, 0xb2, 0x4b, 0xca, 0x8a, 0x05, 0x42, 0xe5, 0x47, 0x91, 0xd8, 0x54, 0x06, 0x96, 0x2c,
	0x26, 0xf6, 0x6d, 0xb0, 0x88, 0x7f, 0x34, 0x33, 0x01, 0xba, 0xe3, 0x11, 0x78, 0x0c, 0x1e, 0x00,
	0xf1, 0x0c, 0x2c, 0xb3, 0xec, 0x92, 0x38, 0x1b, 0x96, 0x7d, 0x04, 0xe4, 0xb1, 0x1d, 0x1a, 0x16,
	0x5d, 0xce, 0x99, 0xef, 0x1c, 0x9f, 0xb9, 0xd7, 0x70, 0x8b, 0x3e, 0x51, 0x66, 0xb4, 0x5f, 0xa8,
	0xdc, 0xe4, 0xe8, 0xd4, 0xa7, 0xfd, 0x27, 0x93, 0xc4, 0x7c, 0x98, 0x8d, 0xfd, 0x28, 0x4f, 0x03,
	0x39, 0xa5, 0x2f, 0x29, 0x4d, 0x93, 0x47, 0xc7, 0xc7, 0x81, 0xa2, 0x34, 0x31, 0xc1, 0x4c, 0x93,
	0xd2, 0x41, 0xf1, 0x71, 0x12, 0x4c, 0x54, 0x11, 0x05, 0xc5, 0xb8, 0x56, 0xea, 0x8c, 0xfd, 0xa7,
	0x37, 0x7a, 0x0b, 0x79, 0x91, 0x52, 0x66, 0xd6, 0xdc, 0x8d, 0xd6, 0xf8, 0x9f, 0xdd, 0xe8, 0x37,
	0x4a, 0x66, 0xfa, 0x9c, 0xd4, 0x5a, 0x40, 0x2b, 0xd6, 0x09, 0x87, 0x3f, 0x39, 0xec, 0xbc, 0xac,
	0x1e, 0xf2, 0x42, 0x1a, 0x89, 0x02, 0x3a, 0x55, 0x3d, 0x8f, 0x1f, 0xf0, 0xa3, 0xde, 0x70, 0xdb,
	0x2f, 0xc6, 0xfe, 0x3b, 0x4d, 0x6a, 0xc4, 0x42, 0xab, 0xe3, 0x09, 0xf4, 0xac, 0x5f, 0x46, 0x26,
	0xc9, 0x33, 0x6f, 0xd3, 0x62, 0xfd, 0x0a, 0x7b, 0xfb, 0x4f, 0x1e, 0xb1, 0xf0, 0x3a, 0x85, 0x1e,
	0x38, 0x49, 0x66, 0x28, 0x33, 0x5e, 0xe7, 0x80, 0x1f, 0xed, 0x8c, 0x58, 0xd8, 0x9c, 0x71, 0x08,
	0xdb, 0x6d, 0x1d, 0xaf, 0x6b, 0xb3, 0xf6, 0x56, 0x59, 0xe7, 0xa4, 0x42, 0xd2, 0x45, 0x9e, 0x69,
	0x1a, 0xb1, 0x70, 0xc5, 0x9d, 0x3a, 0xd0, 0xa9, 0xaa, 0x1e, 0xbe, 0x87, 0xae, 0xed, 0x8d, 0xf7,
	0xa1, 0x6b, 0x37, 0x61, 0x4b, 0xef, 0x0e, 0x07, 0x7e, 0xb3, 0x25, 0x7b, 0xfb, 0x3a, 0xc9, 0xe2,
	0xb0, 0xbe, 0xc7, 0x87, 0xb0, 0x55, 0xc8, 0x8b, 0x69, 0x2e, 0x63, 0x6f, 0xc3, 0x7e, 0x6c, 0x1d,
	0xad, 0x52, 0xc3, 0x96, 0x78, 0xf0, 0xa3, 0x9d, 0x4b, 0x95, 0x80, 0x7d, 0xe8, 0x55, 0x73, 0x78,
	0xae, 0x48, 0x1a, 0x8a, 0x5d, 0x86, 0xf7, 0x00, 0x2b, 0xe1, 0x4c, 0x6a, 0xfd, 0x39, 0x57, 0x71,
	0x48, 0x9a, 0x94, 0x71, 0x39, 0xde, 0x81, 0xfe, 0x59, 0xbd, 0xa1, 0x37, 0xb3, 0x28, 0xa2, 0x98,
	0x62, 0x77, 0x03, 0x07, 0x70, 0xbb, 0x11, 0x5f, 0xc9, 0x64, 0x4a, 0xb1, 0xbb, 0x89, 0x7b, 0xe0,
	0xb6, 0xaf, 0x5c, 0x81, 0x1d, 0x44, 0xd8, 0x6d, 0xd5, 0x86, 0xec, 0xe2, 0x5d, 0x18, 0x5c, 0x9b,
	0x6d, 0x0d, 0xbb, 0xce, 0x7f, 0x72, 0x43, 0x6f, 0x9d, 0x3e, 0x9e, 0x2f, 0x04, 0xbb, 0x5c, 0x08,
	0x76, 0xb5, 0x10, 0xfc, 0x6b, 0x29, 0xf8, 0xf7, 0x52, 0xf0, 0x5f, 0xa5, 0xe0, 0xf3, 0x52, 0xf0,
	0xdf, 0xa5, 0xe0, 0x7f, 0x4a, 0xc1, 0xae, 0x4a, 0xc1, 0xbf, 0x2d, 0x05, 0x9b, 0x2f, 0x05, 0xbb,
	0x5c, 0x0a, 0x36, 0x76, 0xec, 0xbf, 0x70, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xbd, 0x3f,
	0xed, 0xe1, 0x02, 0x00, 0x00,
}

func (x EventKind) String() string {
	s, ok := EventKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *EventData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventData)
	if !ok {
		that2, ok := that.(EventData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Data == nil {
		if this.Data != nil {
			return false
		}
	} else if this.Data == nil {
		return false
	} else if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *EventData_User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventData_User)
	if !ok {
		that2, ok := that.(EventData_User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	return true
}
func (this *EventData_Transaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventData_Transaction)
	if !ok {
		that2, ok := that.(EventData_Transaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transaction.Equal(that1.Transaction) {
		return false
	}
	return true
}
func (this *EventData_Intent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventData_Intent)
	if !ok {
		that2, ok := that.(EventData_Intent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Intent != that1.Intent {
		return false
	}
	return true
}
func (this *EventData_Transfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventData_Transfer)
	if !ok {
		that2, ok := that.(EventData_Transfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transfer.Equal(that1.Transfer) {
		return false
	}
	return true
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *EventData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&events.EventData{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventData_User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&events.EventData_User{` +
		`User:` + fmt.Sprintf("%#v", this.User) + `}`}, ", ")
	return s
}
func (this *EventData_Transaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&events.EventData_Transaction{` +
		`Transaction:` + fmt.Sprintf("%#v", this.Transaction) + `}`}, ", ")
	return s
}
func (this *EventData_Intent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&events.EventData_Intent{` +
		`Intent:` + fmt.Sprintf("%#v", this.Intent) + `}`}, ", ")
	return s
}
func (this *EventData_Transfer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&events.EventData_Transfer{` +
		`Transfer:` + fmt.Sprintf("%#v", this.Transfer) + `}`}, ", ")
	return s
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&events.Event{")
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvents(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EventData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventData_User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventData_User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EventData_Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventData_Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EventData_Intent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventData_Intent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Intent)
	copy(dAtA[i:], m.Intent)
	i = encodeVarintEvents(dAtA, i, uint64(len(m.Intent)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *EventData_Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventData_Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Transfer != nil {
		{
			size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Event != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Event))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *EventData_User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventData_Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventData_Intent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Intent)
	n += 1 + l + sovEvents(uint64(l))
	return n
}
func (m *EventData_Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transfer != nil {
		l = m.Transfer.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != 0 {
		n += 1 + sovEvents(uint64(m.Event))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EventData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventData{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventData_User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventData_User{`,
		`User:` + strings.Replace(fmt.Sprintf("%v", this.User), "User", "pb.User", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventData_Transaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventData_Transaction{`,
		`Transaction:` + strings.Replace(fmt.Sprintf("%v", this.Transaction), "Transaction", "pb1.Transaction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventData_Intent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventData_Intent{`,
		`Intent:` + fmt.Sprintf("%v", this.Intent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventData_Transfer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventData_Transfer{`,
		`Transfer:` + strings.Replace(fmt.Sprintf("%v", this.Transfer), "TransferResponse", "pb2.TransferResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`Payload:` + strings.Replace(this.Payload.String(), "EventData", "EventData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvents(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EventData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pb.User{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &EventData_User{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pb1.Transaction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &EventData_Transaction{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = &EventData_Intent{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &pb2.TransferResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &EventData_Transfer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= EventKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &EventData{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
