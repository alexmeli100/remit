// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package grpc

import (
	endpoint "github.com/alexmeli100/remit/users/pkg/endpoint"
	pb "github.com/alexmeli100/remit/users/pkg/grpc/pb"
	"github.com/alexmeli100/remit/users/pkg/service"
	grpcTrans "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"
)

// NewGRPCServer makes a set of endpoints available as a gRPC AddServer
type grpcServer struct {
	create         grpcTrans.Handler
	getUserByID    grpcTrans.Handler
	getUserByEmail grpcTrans.Handler
	updateEmail    grpcTrans.Handler
	updatePassword grpcTrans.Handler
	updateStatus   grpcTrans.Handler
}

func NewGRPCServer(endpoints endpoint.Endpoints, options map[string][]grpcTrans.ServerOption) pb.UsersServer {
	return &grpcServer{
		create:         makeCreateHandler(endpoints, options["Create"]),
		getUserByEmail: makeGetUserByEmailHandler(endpoints, options["GetUserByEmail"]),
		getUserByID:    makeGetUserByIDHandler(endpoints, options["GetUserByID"]),
		updateEmail:    makeUpdateEmailHandler(endpoints, options["UpdateEmail"]),
		updatePassword: makeUpdatePasswordHandler(endpoints, options["UpdatePassword"]),
		updateStatus:   makeUpdateStatusHandler(endpoints, options["UpdateStatus"]),
	}
}

func NewGRPCClient(conn *grpc.ClientConn, options map[string][]grpcTrans.ClientOption) service.UsersService {
	return endpoint.Endpoints{
		CreateEndpoint:         makeCreateClient(conn, options["Create"]).Endpoint(),
		GetUserByEmailEndpoint: makeGetUserByEmailClient(conn, options["GetUserByEmail"]).Endpoint(),
		GetUserByIDEndpoint:    makeGetUserByIDClient(conn, options["GetUserByID"]).Endpoint(),
		UpdateEmailEndpoint:    makeUpdateEmailClient(conn, options["UpdateEmail"]).Endpoint(),
		UpdatePasswordEndpoint: makeUpdatePasswordClient(conn, options["UpdatePassword"]).Endpoint(),
		UpdateStatusEndpoint:   makeUpdateStatusClient(conn, options["UpdateStatus"]).Endpoint(),
	}
}
