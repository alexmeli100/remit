// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payment.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Transaction struct {
	// @inject_tag: db:"id"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	// @inject_tag: db:"recipient_id"
	RecipientId int64 `protobuf:"varint,2,opt,name=recipientId,proto3" json:"recipientId,omitempty" db:"recipient_id"`
	// @inject_tag: db:"user_id"
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty" db:"user_id"`
	// @inject_tag: db:"created_at"
	CreatedAt *time.Time `protobuf:"bytes,4,opt,name=createdAt,proto3,stdtime" json:"createdAt,omitempty" db:"created_at"`
	// @inject_tag: db:"amount_received"
	AmountReceived float64 `protobuf:"fixed64,5,opt,name=amountReceived,proto3" json:"amountReceived,omitempty" db:"amount_received"`
	// @inject_tag: db:"amount_sent"
	AmountSent float64 `protobuf:"fixed64,6,opt,name=amountSent,proto3" json:"amountSent,omitempty" db:"amount_sent"`
	// @inject_tag: db:"transaction_fee"
	TransactionFee float64 `protobuf:"fixed64,7,opt,name=transactionFee,proto3" json:"transactionFee,omitempty" db:"transaction_fee"`
	// @inject_tag: db:"transaction_type"
	TransactionType string `protobuf:"bytes,8,opt,name=transactionType,proto3" json:"transactionType,omitempty" db:"transaction_type"`
	// @inject_tag: db:"send_currency"
	SendCurrency string `protobuf:"bytes,9,opt,name=sendCurrency,proto3" json:"sendCurrency,omitempty" db:"send_currency"`
	// @inject_tag: db:"receive_currency"
	ReceiveCurrency string `protobuf:"bytes,10,opt,name=receiveCurrency,proto3" json:"receiveCurrency,omitempty" db:"receive_currency"`
	// @inject_tag: db:"exchange_rate"
	ExchangeRate float64 `protobuf:"fixed64,11,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty" db:"exchange_rate"`
	// @inject_tag: db:"payment_intent"
	PaymentIntent string `protobuf:"bytes,12,opt,name=paymentIntent,proto3" json:"paymentIntent,omitempty" db:"payment_intent"`
}

func (m *Transaction) Reset()      { *m = Transaction{} }
func (*Transaction) ProtoMessage() {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{0}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Transaction) GetRecipientId() int64 {
	if m != nil {
		return m.RecipientId
	}
	return 0
}

func (m *Transaction) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Transaction) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Transaction) GetAmountReceived() float64 {
	if m != nil {
		return m.AmountReceived
	}
	return 0
}

func (m *Transaction) GetAmountSent() float64 {
	if m != nil {
		return m.AmountSent
	}
	return 0
}

func (m *Transaction) GetTransactionFee() float64 {
	if m != nil {
		return m.TransactionFee
	}
	return 0
}

func (m *Transaction) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

func (m *Transaction) GetSendCurrency() string {
	if m != nil {
		return m.SendCurrency
	}
	return ""
}

func (m *Transaction) GetReceiveCurrency() string {
	if m != nil {
		return m.ReceiveCurrency
	}
	return ""
}

func (m *Transaction) GetExchangeRate() float64 {
	if m != nil {
		return m.ExchangeRate
	}
	return 0
}

func (m *Transaction) GetPaymentIntent() string {
	if m != nil {
		return m.PaymentIntent
	}
	return ""
}

type PaymentRequest struct {
	Uid      string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Amount   float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	CardID   string  `protobuf:"bytes,4,opt,name=cardID,proto3" json:"cardID,omitempty"`
	Capture  bool    `protobuf:"varint,5,opt,name=capture,proto3" json:"capture,omitempty"`
}

func (m *PaymentRequest) Reset()      { *m = PaymentRequest{} }
func (*PaymentRequest) ProtoMessage() {}
func (*PaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{1}
}
func (m *PaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentRequest.Merge(m, src)
}
func (m *PaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *PaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentRequest proto.InternalMessageInfo

func (m *PaymentRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *PaymentRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PaymentRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PaymentRequest) GetCardID() string {
	if m != nil {
		return m.CardID
	}
	return ""
}

func (m *PaymentRequest) GetCapture() bool {
	if m != nil {
		return m.Capture
	}
	return false
}

type SaveCardRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *SaveCardRequest) Reset()      { *m = SaveCardRequest{} }
func (*SaveCardRequest) ProtoMessage() {}
func (*SaveCardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{2}
}
func (m *SaveCardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveCardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveCardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveCardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveCardRequest.Merge(m, src)
}
func (m *SaveCardRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveCardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveCardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveCardRequest proto.InternalMessageInfo

func (m *SaveCardRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type SaveCardReply struct {
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *SaveCardReply) Reset()      { *m = SaveCardReply{} }
func (*SaveCardReply) ProtoMessage() {}
func (*SaveCardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{3}
}
func (m *SaveCardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveCardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveCardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveCardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveCardReply.Merge(m, src)
}
func (m *SaveCardReply) XXX_Size() int {
	return m.Size()
}
func (m *SaveCardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveCardReply.DiscardUnknown(m)
}

var xxx_messageInfo_SaveCardReply proto.InternalMessageInfo

func (m *SaveCardReply) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *SaveCardReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetPaymentIntentSecretRequest struct {
	Req *PaymentRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *GetPaymentIntentSecretRequest) Reset()      { *m = GetPaymentIntentSecretRequest{} }
func (*GetPaymentIntentSecretRequest) ProtoMessage() {}
func (*GetPaymentIntentSecretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{4}
}
func (m *GetPaymentIntentSecretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPaymentIntentSecretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPaymentIntentSecretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPaymentIntentSecretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPaymentIntentSecretRequest.Merge(m, src)
}
func (m *GetPaymentIntentSecretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPaymentIntentSecretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPaymentIntentSecretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPaymentIntentSecretRequest proto.InternalMessageInfo

func (m *GetPaymentIntentSecretRequest) GetReq() *PaymentRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

type GetPaymentIntentSecretReply struct {
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *GetPaymentIntentSecretReply) Reset()      { *m = GetPaymentIntentSecretReply{} }
func (*GetPaymentIntentSecretReply) ProtoMessage() {}
func (*GetPaymentIntentSecretReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{5}
}
func (m *GetPaymentIntentSecretReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPaymentIntentSecretReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPaymentIntentSecretReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPaymentIntentSecretReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPaymentIntentSecretReply.Merge(m, src)
}
func (m *GetPaymentIntentSecretReply) XXX_Size() int {
	return m.Size()
}
func (m *GetPaymentIntentSecretReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPaymentIntentSecretReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetPaymentIntentSecretReply proto.InternalMessageInfo

func (m *GetPaymentIntentSecretReply) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *GetPaymentIntentSecretReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type CapturePaymentRequest struct {
	Pi     string  `protobuf:"bytes,1,opt,name=pi,proto3" json:"pi,omitempty"`
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *CapturePaymentRequest) Reset()      { *m = CapturePaymentRequest{} }
func (*CapturePaymentRequest) ProtoMessage() {}
func (*CapturePaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{6}
}
func (m *CapturePaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapturePaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapturePaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CapturePaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapturePaymentRequest.Merge(m, src)
}
func (m *CapturePaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *CapturePaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CapturePaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CapturePaymentRequest proto.InternalMessageInfo

func (m *CapturePaymentRequest) GetPi() string {
	if m != nil {
		return m.Pi
	}
	return ""
}

func (m *CapturePaymentRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CapturePaymentReply struct {
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *CapturePaymentReply) Reset()      { *m = CapturePaymentReply{} }
func (*CapturePaymentReply) ProtoMessage() {}
func (*CapturePaymentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{7}
}
func (m *CapturePaymentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapturePaymentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapturePaymentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CapturePaymentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapturePaymentReply.Merge(m, src)
}
func (m *CapturePaymentReply) XXX_Size() int {
	return m.Size()
}
func (m *CapturePaymentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CapturePaymentReply.DiscardUnknown(m)
}

var xxx_messageInfo_CapturePaymentReply proto.InternalMessageInfo

func (m *CapturePaymentReply) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *CapturePaymentReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetCustomerIDRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *GetCustomerIDRequest) Reset()      { *m = GetCustomerIDRequest{} }
func (*GetCustomerIDRequest) ProtoMessage() {}
func (*GetCustomerIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{8}
}
func (m *GetCustomerIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCustomerIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCustomerIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCustomerIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCustomerIDRequest.Merge(m, src)
}
func (m *GetCustomerIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCustomerIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCustomerIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCustomerIDRequest proto.InternalMessageInfo

func (m *GetCustomerIDRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type GetCustomerIDReply struct {
	CustomerID string `protobuf:"bytes,1,opt,name=customerID,proto3" json:"customerID,omitempty"`
	Err        string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *GetCustomerIDReply) Reset()      { *m = GetCustomerIDReply{} }
func (*GetCustomerIDReply) ProtoMessage() {}
func (*GetCustomerIDReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{9}
}
func (m *GetCustomerIDReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCustomerIDReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCustomerIDReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCustomerIDReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCustomerIDReply.Merge(m, src)
}
func (m *GetCustomerIDReply) XXX_Size() int {
	return m.Size()
}
func (m *GetCustomerIDReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCustomerIDReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetCustomerIDReply proto.InternalMessageInfo

func (m *GetCustomerIDReply) GetCustomerID() string {
	if m != nil {
		return m.CustomerID
	}
	return ""
}

func (m *GetCustomerIDReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type CreateTransactionRequest struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *CreateTransactionRequest) Reset()      { *m = CreateTransactionRequest{} }
func (*CreateTransactionRequest) ProtoMessage() {}
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{10}
}
func (m *CreateTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTransactionRequest.Merge(m, src)
}
func (m *CreateTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTransactionRequest proto.InternalMessageInfo

func (m *CreateTransactionRequest) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type CreateTransactionReply struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Err         string       `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *CreateTransactionReply) Reset()      { *m = CreateTransactionReply{} }
func (*CreateTransactionReply) ProtoMessage() {}
func (*CreateTransactionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{11}
}
func (m *CreateTransactionReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTransactionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTransactionReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTransactionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTransactionReply.Merge(m, src)
}
func (m *CreateTransactionReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateTransactionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTransactionReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTransactionReply proto.InternalMessageInfo

func (m *CreateTransactionReply) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *CreateTransactionReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*Transaction)(nil), "pb.Transaction")
	proto.RegisterType((*PaymentRequest)(nil), "pb.PaymentRequest")
	proto.RegisterType((*SaveCardRequest)(nil), "pb.SaveCardRequest")
	proto.RegisterType((*SaveCardReply)(nil), "pb.SaveCardReply")
	proto.RegisterType((*GetPaymentIntentSecretRequest)(nil), "pb.GetPaymentIntentSecretRequest")
	proto.RegisterType((*GetPaymentIntentSecretReply)(nil), "pb.GetPaymentIntentSecretReply")
	proto.RegisterType((*CapturePaymentRequest)(nil), "pb.CapturePaymentRequest")
	proto.RegisterType((*CapturePaymentReply)(nil), "pb.CapturePaymentReply")
	proto.RegisterType((*GetCustomerIDRequest)(nil), "pb.GetCustomerIDRequest")
	proto.RegisterType((*GetCustomerIDReply)(nil), "pb.GetCustomerIDReply")
	proto.RegisterType((*CreateTransactionRequest)(nil), "pb.CreateTransactionRequest")
	proto.RegisterType((*CreateTransactionReply)(nil), "pb.CreateTransactionReply")
}

func init() { proto.RegisterFile("payment.proto", fileDescriptor_6362648dfa63d410) }

var fileDescriptor_6362648dfa63d410 = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xc1, 0x53, 0xd3, 0x4e,
	0x14, 0xee, 0xb6, 0xfc, 0xa0, 0x7d, 0x85, 0xf2, 0x63, 0xd1, 0x1a, 0xa3, 0x2e, 0x35, 0x32, 0x4e,
	0x2f, 0x96, 0xb1, 0x7a, 0xf1, 0x22, 0x03, 0x45, 0x98, 0x1e, 0x98, 0x61, 0x02, 0x47, 0x3d, 0xa4,
	0xc9, 0xb3, 0x64, 0x86, 0x26, 0x61, 0xbb, 0x61, 0xec, 0xcd, 0xa3, 0x47, 0xfe, 0x0c, 0xff, 0x14,
	0xbd, 0x71, 0xe4, 0xa6, 0x94, 0x8b, 0x47, 0x66, 0xfc, 0x07, 0x9c, 0xdd, 0xa4, 0x6d, 0x12, 0x5a,
	0x66, 0xb8, 0xed, 0xfb, 0xf6, 0xdb, 0xef, 0x7d, 0xbb, 0xdf, 0x4b, 0x0b, 0x4b, 0x81, 0x35, 0xe8,
	0xa1, 0x27, 0x1a, 0x01, 0xf7, 0x85, 0x4f, 0xf3, 0x41, 0x47, 0x5f, 0xeb, 0xfa, 0x7e, 0xf7, 0x04,
	0x37, 0x14, 0xd2, 0x09, 0x3f, 0x6f, 0x08, 0xb7, 0x87, 0x7d, 0x61, 0xf5, 0x82, 0x88, 0xa4, 0xbf,
	0xea, 0xba, 0xe2, 0x38, 0xec, 0x34, 0x6c, 0xbf, 0xb7, 0xd1, 0xf5, 0xbb, 0xfe, 0x84, 0x29, 0x2b,
	0x55, 0xa8, 0x55, 0x44, 0x37, 0x7e, 0x16, 0xa0, 0x7c, 0xc4, 0x2d, 0xaf, 0x6f, 0xd9, 0xc2, 0xf5,
	0x3d, 0x5a, 0x81, 0xbc, 0xeb, 0x68, 0xa4, 0x46, 0xea, 0x05, 0x33, 0xef, 0x3a, 0xb4, 0x06, 0x65,
	0x8e, 0xb6, 0x1b, 0xb8, 0xe8, 0x89, 0xb6, 0xa3, 0xe5, 0xd5, 0x46, 0x12, 0xa2, 0x55, 0x98, 0x0f,
	0xfb, 0xc8, 0xdb, 0x8e, 0x56, 0xa8, 0x91, 0x7a, 0xc9, 0x8c, 0x2b, 0xfa, 0x1e, 0x4a, 0x36, 0x47,
	0x4b, 0xa0, 0xb3, 0x25, 0xb4, 0xb9, 0x1a, 0xa9, 0x97, 0x9b, 0x7a, 0x23, 0x72, 0xdf, 0x18, 0x79,
	0x6a, 0x1c, 0x8d, 0xdc, 0x6f, 0xcf, 0x9d, 0xff, 0x5a, 0x23, 0xe6, 0xe4, 0x08, 0x7d, 0x09, 0x15,
	0xab, 0xe7, 0x87, 0x9e, 0x30, 0xd1, 0x46, 0xf7, 0x0c, 0x1d, 0xed, 0xbf, 0x1a, 0xa9, 0x13, 0x33,
	0x83, 0x52, 0x06, 0x10, 0x21, 0x87, 0xe8, 0x09, 0x6d, 0x5e, 0x71, 0x12, 0x88, 0xd4, 0x11, 0x93,
	0x0b, 0xee, 0x22, 0x6a, 0x0b, 0x91, 0x4e, 0x1a, 0xa5, 0x75, 0x58, 0x4e, 0x20, 0x47, 0x83, 0x00,
	0xb5, 0xa2, 0xba, 0x50, 0x16, 0xa6, 0x06, 0x2c, 0xf6, 0xd1, 0x73, 0x5a, 0x21, 0xe7, 0xe8, 0xd9,
	0x03, 0xad, 0xa4, 0x68, 0x29, 0x4c, 0xaa, 0xf1, 0xc8, 0xe1, 0x98, 0x06, 0x91, 0x5a, 0x06, 0x96,
	0x6a, 0xf8, 0xc5, 0x3e, 0xb6, 0xbc, 0x2e, 0x9a, 0x96, 0x40, 0xad, 0xac, 0xdc, 0xa5, 0x30, 0xba,
	0x3e, 0x1e, 0x85, 0xb6, 0x27, 0xe4, 0x35, 0x17, 0x95, 0x56, 0x1a, 0x34, 0xbe, 0x11, 0xa8, 0x1c,
	0x44, 0x88, 0x89, 0xa7, 0x21, 0xf6, 0x05, 0xfd, 0x1f, 0x0a, 0x61, 0x9c, 0x67, 0xc9, 0x94, 0x4b,
	0x19, 0x57, 0xf4, 0x38, 0x2a, 0x4b, 0x62, 0xc6, 0x15, 0xd5, 0xa1, 0x68, 0x8f, 0x9c, 0x46, 0x41,
	0x8e, 0x6b, 0x79, 0xc6, 0xb6, 0xb8, 0xd3, 0xde, 0x51, 0x39, 0x96, 0xcc, 0xb8, 0xa2, 0x1a, 0x2c,
	0xd8, 0x56, 0x20, 0x42, 0x8e, 0x2a, 0x9b, 0xa2, 0x39, 0x2a, 0x8d, 0x17, 0xb0, 0x7c, 0x68, 0x9d,
	0x61, 0xcb, 0xe2, 0xce, 0x4c, 0x2b, 0xc6, 0x3b, 0x58, 0x9a, 0x90, 0x82, 0x13, 0xd5, 0xa7, 0x8f,
	0x36, 0x47, 0x11, 0xb3, 0xe2, 0x4a, 0x1e, 0x45, 0xce, 0x95, 0xe1, 0x92, 0x29, 0x97, 0xc6, 0x07,
	0x78, 0xb6, 0x87, 0xe2, 0x20, 0x79, 0xfd, 0x43, 0xc5, 0x1d, 0x75, 0x5b, 0x87, 0x02, 0xc7, 0x53,
	0xa5, 0x53, 0x6e, 0xd2, 0x46, 0xd0, 0x69, 0xa4, 0x5f, 0xc6, 0x94, 0xdb, 0xc6, 0x1e, 0x3c, 0x99,
	0x25, 0x73, 0x3f, 0x3f, 0x9b, 0xf0, 0xb0, 0x15, 0x5d, 0x3d, 0x13, 0x40, 0x05, 0xf2, 0x81, 0x1b,
	0x1f, 0xcf, 0x07, 0xee, 0xac, 0xe7, 0x37, 0x36, 0x61, 0x35, 0x2b, 0x70, 0x3f, 0x07, 0x75, 0x78,
	0xb0, 0x87, 0xa2, 0x15, 0xf6, 0x85, 0xdf, 0x43, 0xde, 0xde, 0x99, 0xfd, 0xec, 0xbb, 0x40, 0x33,
	0x4c, 0xd9, 0x89, 0x01, 0xd8, 0x63, 0x28, 0xa6, 0x27, 0x90, 0x29, 0x1d, 0xf7, 0x41, 0x6b, 0xa9,
	0xaf, 0x35, 0xf1, 0xfb, 0x31, 0xea, 0xfa, 0x1a, 0xca, 0x89, 0xaf, 0x26, 0x8e, 0x61, 0x59, 0xc6,
	0x90, 0x24, 0x27, 0x39, 0xc6, 0x27, 0xa8, 0x4e, 0x91, 0x93, 0xd6, 0xee, 0x2f, 0x76, 0xdb, 0x6d,
	0xf3, 0x6f, 0x1e, 0x16, 0xe2, 0xa7, 0xa5, 0x4d, 0x28, 0x8e, 0x06, 0x8f, 0xae, 0x4a, 0x9d, 0xcc,
	0xac, 0xea, 0x2b, 0x69, 0x50, 0x9a, 0xf8, 0x08, 0xd5, 0xe9, 0xa3, 0x42, 0x9f, 0x4b, 0xf2, 0x9d,
	0xd3, 0xa8, 0xaf, 0xdd, 0x45, 0x91, 0xea, 0x3b, 0x50, 0x49, 0xc7, 0x4f, 0x1f, 0xcb, 0x23, 0x53,
	0x67, 0x4a, 0x7f, 0x34, 0x6d, 0x4b, 0xaa, 0x6c, 0xc1, 0x52, 0x2a, 0x59, 0xaa, 0xc5, 0x7d, 0x6f,
	0x8d, 0x85, 0x5e, 0x9d, 0xb2, 0x23, 0x25, 0xf6, 0x61, 0xe5, 0x56, 0x0a, 0xf4, 0xa9, 0x6a, 0x38,
	0x23, 0x6b, 0x5d, 0x9f, 0xb1, 0x1b, 0x9c, 0x0c, 0xb6, 0xdf, 0x5e, 0x5c, 0xb1, 0xdc, 0xe5, 0x15,
	0xcb, 0xdd, 0x5c, 0x31, 0xf2, 0x75, 0xc8, 0xc8, 0xf7, 0x21, 0x23, 0x3f, 0x86, 0x8c, 0x5c, 0x0c,
	0x19, 0xf9, 0x3d, 0x64, 0xe4, 0xcf, 0x90, 0xe5, 0x6e, 0x86, 0x8c, 0x9c, 0x5f, 0xb3, 0xdc, 0xc5,
	0x35, 0xcb, 0x5d, 0x5e, 0xb3, 0x5c, 0x67, 0x5e, 0xfd, 0x3f, 0xbc, 0xf9, 0x17, 0x00, 0x00, 0xff,
	0xff, 0x89, 0x79, 0x27, 0x03, 0x00, 0x07, 0x00, 0x00,
}

func (this *Transaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transaction)
	if !ok {
		that2, ok := that.(Transaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RecipientId != that1.RecipientId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if this.AmountReceived != that1.AmountReceived {
		return false
	}
	if this.AmountSent != that1.AmountSent {
		return false
	}
	if this.TransactionFee != that1.TransactionFee {
		return false
	}
	if this.TransactionType != that1.TransactionType {
		return false
	}
	if this.SendCurrency != that1.SendCurrency {
		return false
	}
	if this.ReceiveCurrency != that1.ReceiveCurrency {
		return false
	}
	if this.ExchangeRate != that1.ExchangeRate {
		return false
	}
	if this.PaymentIntent != that1.PaymentIntent {
		return false
	}
	return true
}
func (this *PaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaymentRequest)
	if !ok {
		that2, ok := that.(PaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Currency != that1.Currency {
		return false
	}
	if this.CardID != that1.CardID {
		return false
	}
	if this.Capture != that1.Capture {
		return false
	}
	return true
}
func (this *SaveCardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveCardRequest)
	if !ok {
		that2, ok := that.(SaveCardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *SaveCardReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveCardReply)
	if !ok {
		that2, ok := that.(SaveCardReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Secret != that1.Secret {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	return true
}
func (this *GetPaymentIntentSecretRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPaymentIntentSecretRequest)
	if !ok {
		that2, ok := that.(GetPaymentIntentSecretRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Req.Equal(that1.Req) {
		return false
	}
	return true
}
func (this *GetPaymentIntentSecretReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPaymentIntentSecretReply)
	if !ok {
		that2, ok := that.(GetPaymentIntentSecretReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Secret != that1.Secret {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	return true
}
func (this *CapturePaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CapturePaymentRequest)
	if !ok {
		that2, ok := that.(CapturePaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pi != that1.Pi {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *CapturePaymentReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CapturePaymentReply)
	if !ok {
		that2, ok := that.(CapturePaymentReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Secret != that1.Secret {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	return true
}
func (this *GetCustomerIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCustomerIDRequest)
	if !ok {
		that2, ok := that.(GetCustomerIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *GetCustomerIDReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCustomerIDReply)
	if !ok {
		that2, ok := that.(GetCustomerIDReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomerID != that1.CustomerID {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	return true
}
func (this *CreateTransactionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTransactionRequest)
	if !ok {
		that2, ok := that.(CreateTransactionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transaction.Equal(that1.Transaction) {
		return false
	}
	return true
}
func (this *CreateTransactionReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTransactionReply)
	if !ok {
		that2, ok := that.(CreateTransactionReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transaction.Equal(that1.Transaction) {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	return true
}
func (this *Transaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.Transaction{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "RecipientId: "+fmt.Sprintf("%#v", this.RecipientId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "AmountReceived: "+fmt.Sprintf("%#v", this.AmountReceived)+",\n")
	s = append(s, "AmountSent: "+fmt.Sprintf("%#v", this.AmountSent)+",\n")
	s = append(s, "TransactionFee: "+fmt.Sprintf("%#v", this.TransactionFee)+",\n")
	s = append(s, "TransactionType: "+fmt.Sprintf("%#v", this.TransactionType)+",\n")
	s = append(s, "SendCurrency: "+fmt.Sprintf("%#v", this.SendCurrency)+",\n")
	s = append(s, "ReceiveCurrency: "+fmt.Sprintf("%#v", this.ReceiveCurrency)+",\n")
	s = append(s, "ExchangeRate: "+fmt.Sprintf("%#v", this.ExchangeRate)+",\n")
	s = append(s, "PaymentIntent: "+fmt.Sprintf("%#v", this.PaymentIntent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.PaymentRequest{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Currency: "+fmt.Sprintf("%#v", this.Currency)+",\n")
	s = append(s, "CardID: "+fmt.Sprintf("%#v", this.CardID)+",\n")
	s = append(s, "Capture: "+fmt.Sprintf("%#v", this.Capture)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveCardRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SaveCardRequest{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveCardReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SaveCardReply{")
	s = append(s, "Secret: "+fmt.Sprintf("%#v", this.Secret)+",\n")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPaymentIntentSecretRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetPaymentIntentSecretRequest{")
	if this.Req != nil {
		s = append(s, "Req: "+fmt.Sprintf("%#v", this.Req)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPaymentIntentSecretReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetPaymentIntentSecretReply{")
	s = append(s, "Secret: "+fmt.Sprintf("%#v", this.Secret)+",\n")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CapturePaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CapturePaymentRequest{")
	s = append(s, "Pi: "+fmt.Sprintf("%#v", this.Pi)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CapturePaymentReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CapturePaymentReply{")
	s = append(s, "Secret: "+fmt.Sprintf("%#v", this.Secret)+",\n")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCustomerIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetCustomerIDRequest{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCustomerIDReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetCustomerIDReply{")
	s = append(s, "CustomerID: "+fmt.Sprintf("%#v", this.CustomerID)+",\n")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTransactionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateTransactionRequest{")
	if this.Transaction != nil {
		s = append(s, "Transaction: "+fmt.Sprintf("%#v", this.Transaction)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTransactionReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CreateTransactionReply{")
	if this.Transaction != nil {
		s = append(s, "Transaction: "+fmt.Sprintf("%#v", this.Transaction)+",\n")
	}
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPayment(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaymentClient is the client API for Payment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentClient interface {
	SaveCard(ctx context.Context, in *SaveCardRequest, opts ...grpc.CallOption) (*SaveCardReply, error)
	GetPaymentIntentSecret(ctx context.Context, in *GetPaymentIntentSecretRequest, opts ...grpc.CallOption) (*GetPaymentIntentSecretReply, error)
	CapturePayment(ctx context.Context, in *CapturePaymentRequest, opts ...grpc.CallOption) (*CapturePaymentReply, error)
	GetCustomerID(ctx context.Context, in *GetCustomerIDRequest, opts ...grpc.CallOption) (*GetCustomerIDReply, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionReply, error)
}

type paymentClient struct {
	cc *grpc.ClientConn
}

func NewPaymentClient(cc *grpc.ClientConn) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) SaveCard(ctx context.Context, in *SaveCardRequest, opts ...grpc.CallOption) (*SaveCardReply, error) {
	out := new(SaveCardReply)
	err := c.cc.Invoke(ctx, "/pb.Payment/SaveCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetPaymentIntentSecret(ctx context.Context, in *GetPaymentIntentSecretRequest, opts ...grpc.CallOption) (*GetPaymentIntentSecretReply, error) {
	out := new(GetPaymentIntentSecretReply)
	err := c.cc.Invoke(ctx, "/pb.Payment/GetPaymentIntentSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) CapturePayment(ctx context.Context, in *CapturePaymentRequest, opts ...grpc.CallOption) (*CapturePaymentReply, error) {
	out := new(CapturePaymentReply)
	err := c.cc.Invoke(ctx, "/pb.Payment/CapturePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetCustomerID(ctx context.Context, in *GetCustomerIDRequest, opts ...grpc.CallOption) (*GetCustomerIDReply, error) {
	out := new(GetCustomerIDReply)
	err := c.cc.Invoke(ctx, "/pb.Payment/GetCustomerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionReply, error) {
	out := new(CreateTransactionReply)
	err := c.cc.Invoke(ctx, "/pb.Payment/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServer is the server API for Payment service.
type PaymentServer interface {
	SaveCard(context.Context, *SaveCardRequest) (*SaveCardReply, error)
	GetPaymentIntentSecret(context.Context, *GetPaymentIntentSecretRequest) (*GetPaymentIntentSecretReply, error)
	CapturePayment(context.Context, *CapturePaymentRequest) (*CapturePaymentReply, error)
	GetCustomerID(context.Context, *GetCustomerIDRequest) (*GetCustomerIDReply, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionReply, error)
}

// UnimplementedPaymentServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentServer struct {
}

func (*UnimplementedPaymentServer) SaveCard(ctx context.Context, req *SaveCardRequest) (*SaveCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCard not implemented")
}
func (*UnimplementedPaymentServer) GetPaymentIntentSecret(ctx context.Context, req *GetPaymentIntentSecretRequest) (*GetPaymentIntentSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentIntentSecret not implemented")
}
func (*UnimplementedPaymentServer) CapturePayment(ctx context.Context, req *CapturePaymentRequest) (*CapturePaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapturePayment not implemented")
}
func (*UnimplementedPaymentServer) GetCustomerID(ctx context.Context, req *GetCustomerIDRequest) (*GetCustomerIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerID not implemented")
}
func (*UnimplementedPaymentServer) CreateTransaction(ctx context.Context, req *CreateTransactionRequest) (*CreateTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}

func RegisterPaymentServer(s *grpc.Server, srv PaymentServer) {
	s.RegisterService(&_Payment_serviceDesc, srv)
}

func _Payment_SaveCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).SaveCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Payment/SaveCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).SaveCard(ctx, req.(*SaveCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetPaymentIntentSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentIntentSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetPaymentIntentSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Payment/GetPaymentIntentSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetPaymentIntentSecret(ctx, req.(*GetPaymentIntentSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_CapturePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapturePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CapturePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Payment/CapturePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CapturePayment(ctx, req.(*CapturePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetCustomerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetCustomerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Payment/GetCustomerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetCustomerID(ctx, req.(*GetCustomerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Payment/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Payment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveCard",
			Handler:    _Payment_SaveCard_Handler,
		},
		{
			MethodName: "GetPaymentIntentSecret",
			Handler:    _Payment_GetPaymentIntentSecret_Handler,
		},
		{
			MethodName: "CapturePayment",
			Handler:    _Payment_CapturePayment_Handler,
		},
		{
			MethodName: "GetCustomerID",
			Handler:    _Payment_GetCustomerID_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Payment_CreateTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentIntent) > 0 {
		i -= len(m.PaymentIntent)
		copy(dAtA[i:], m.PaymentIntent)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PaymentIntent)))
		i--
		dAtA[i] = 0x62
	}
	if m.ExchangeRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ExchangeRate))))
		i--
		dAtA[i] = 0x59
	}
	if len(m.ReceiveCurrency) > 0 {
		i -= len(m.ReceiveCurrency)
		copy(dAtA[i:], m.ReceiveCurrency)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ReceiveCurrency)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SendCurrency) > 0 {
		i -= len(m.SendCurrency)
		copy(dAtA[i:], m.SendCurrency)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.SendCurrency)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TransactionType) > 0 {
		i -= len(m.TransactionType)
		copy(dAtA[i:], m.TransactionType)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.TransactionType)))
		i--
		dAtA[i] = 0x42
	}
	if m.TransactionFee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TransactionFee))))
		i--
		dAtA[i] = 0x39
	}
	if m.AmountSent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AmountSent))))
		i--
		dAtA[i] = 0x31
	}
	if m.AmountReceived != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AmountReceived))))
		i--
		dAtA[i] = 0x29
	}
	if m.CreatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintPayment(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RecipientId != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.RecipientId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Capture {
		i--
		if m.Capture {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.CardID) > 0 {
		i -= len(m.CardID)
		copy(dAtA[i:], m.CardID)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CardID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveCardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveCardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveCardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveCardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveCardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPaymentIntentSecretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPaymentIntentSecretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPaymentIntentSecretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPayment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPaymentIntentSecretReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPaymentIntentSecretReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPaymentIntentSecretReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CapturePaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapturePaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CapturePaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Pi) > 0 {
		i -= len(m.Pi)
		copy(dAtA[i:], m.Pi)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Pi)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CapturePaymentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapturePaymentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CapturePaymentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCustomerIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCustomerIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCustomerIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCustomerIDReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCustomerIDReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CustomerID) > 0 {
		i -= len(m.CustomerID)
		copy(dAtA[i:], m.CustomerID)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CustomerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPayment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTransactionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTransactionReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTransactionReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPayment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPayment(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayment(uint64(m.Id))
	}
	if m.RecipientId != 0 {
		n += 1 + sovPayment(uint64(m.RecipientId))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.AmountReceived != 0 {
		n += 9
	}
	if m.AmountSent != 0 {
		n += 9
	}
	if m.TransactionFee != 0 {
		n += 9
	}
	l = len(m.TransactionType)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.SendCurrency)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.ReceiveCurrency)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.ExchangeRate != 0 {
		n += 9
	}
	l = len(m.PaymentIntent)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *PaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.Amount != 0 {
		n += 9
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.CardID)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.Capture {
		n += 2
	}
	return n
}

func (m *SaveCardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *SaveCardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *GetPaymentIntentSecretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *GetPaymentIntentSecretReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *CapturePaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pi)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.Amount != 0 {
		n += 9
	}
	return n
}

func (m *CapturePaymentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *GetCustomerIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *GetCustomerIDReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomerID)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *CreateTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *CreateTransactionReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func sovPayment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayment(x uint64) (n int) {
	return sovPayment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Transaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transaction{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`RecipientId:` + fmt.Sprintf("%v", this.RecipientId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`AmountReceived:` + fmt.Sprintf("%v", this.AmountReceived) + `,`,
		`AmountSent:` + fmt.Sprintf("%v", this.AmountSent) + `,`,
		`TransactionFee:` + fmt.Sprintf("%v", this.TransactionFee) + `,`,
		`TransactionType:` + fmt.Sprintf("%v", this.TransactionType) + `,`,
		`SendCurrency:` + fmt.Sprintf("%v", this.SendCurrency) + `,`,
		`ReceiveCurrency:` + fmt.Sprintf("%v", this.ReceiveCurrency) + `,`,
		`ExchangeRate:` + fmt.Sprintf("%v", this.ExchangeRate) + `,`,
		`PaymentIntent:` + fmt.Sprintf("%v", this.PaymentIntent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaymentRequest{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Currency:` + fmt.Sprintf("%v", this.Currency) + `,`,
		`CardID:` + fmt.Sprintf("%v", this.CardID) + `,`,
		`Capture:` + fmt.Sprintf("%v", this.Capture) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SaveCardRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SaveCardRequest{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SaveCardReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SaveCardReply{`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPaymentIntentSecretRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPaymentIntentSecretRequest{`,
		`Req:` + strings.Replace(this.Req.String(), "PaymentRequest", "PaymentRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPaymentIntentSecretReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPaymentIntentSecretReply{`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CapturePaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CapturePaymentRequest{`,
		`Pi:` + fmt.Sprintf("%v", this.Pi) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CapturePaymentReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CapturePaymentReply{`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCustomerIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCustomerIDRequest{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCustomerIDReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCustomerIDReply{`,
		`CustomerID:` + fmt.Sprintf("%v", this.CustomerID) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTransactionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTransactionRequest{`,
		`Transaction:` + strings.Replace(this.Transaction.String(), "Transaction", "Transaction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTransactionReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTransactionReply{`,
		`Transaction:` + strings.Replace(this.Transaction.String(), "Transaction", "Transaction", 1) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPayment(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientId", wireType)
			}
			m.RecipientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecipientId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountReceived", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AmountReceived = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountSent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AmountSent = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TransactionFee = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ExchangeRate = float64(math.Float64frombits(v))
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentIntent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentIntent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capture", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Capture = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveCardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveCardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveCardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPaymentIntentSecretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPaymentIntentSecretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPaymentIntentSecretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &PaymentRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPaymentIntentSecretReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPaymentIntentSecretReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPaymentIntentSecretReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapturePaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapturePaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapturePaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapturePaymentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapturePaymentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapturePaymentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCustomerIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCustomerIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCustomerIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTransactionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTransactionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTransactionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayment = fmt.Errorf("proto: unexpected end of group")
)
